<?php

use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\Entity\NodeType;

/**
 * Implements hook_install().
 */
function uic_config_install(): void {
  // Ensure required content type exists only if truly needed elsewhere.
  // This module's primary responsibility is to add custom fields to Article.
  _uic_config_create_activity_page_content_type();
  _uic_config_create_activity_page_fields();
  _uic_config_configure_activity_page_displays();
  _uic_config_create_project_page_fields();
  _uic_config_configure_project_page_displays();
  _uic_config_create_article_fields();
  _uic_config_configure_article_displays();
  _uic_config_ensure_all_form_displays();
  _uic_config_configure_graphql_compose();
}

/**
 * Create field storage if missing.
 */
function _uic_config_ensure_field_storage(string $entityType, string $fieldName, string $type, array $storageSettings = [], int $cardinality = 1): void {
  $existing = FieldStorageConfig::loadByName($entityType, $fieldName);
  if ($existing) {
    return;
  }

  FieldStorageConfig::create([
    'field_name' => $fieldName,
    'entity_type' => $entityType,
    'type' => $type,
    'settings' => $storageSettings,
    'cardinality' => $cardinality,
    'translatable' => TRUE,
  ])->save();
}

/**
 * Ensure Activity page content type exists.
 */
function _uic_config_create_activity_page_content_type(): void {
  $bundle = 'activity_page';
  if (NodeType::load($bundle)) {
    return;
  }

  $type = NodeType::create([
    'type' => $bundle,
    'name' => 'Activity page',
    'description' => 'Page type for activities (migrated from SPIP or created manually).',
  ]);
  $type->save();
}

/**
 * Create all Activity page fields in an idempotent way.
 */
function _uic_config_create_activity_page_fields(): void {
  $entityType = 'node';
  $bundle = 'activity_page';

  if (!NodeType::load($bundle)) {
    return;
  }

  // body (text_with_summary)
  _uic_config_ensure_field_storage($entityType, 'body', 'text_with_summary', [], 1);
  _uic_config_ensure_field_instance($entityType, $bundle, 'body', 'Body', ['display_summary' => TRUE]);

  // field_subtitle (string)
  _uic_config_ensure_field_storage($entityType, 'field_subtitle', 'string', ['max_length' => 255], 1);
  _uic_config_ensure_field_instance($entityType, $bundle, 'field_subtitle', 'Subtitle');

  // field_header (text_long)
  _uic_config_ensure_field_storage($entityType, 'field_header', 'text_long', [], 1);
  _uic_config_ensure_field_instance($entityType, $bundle, 'field_header', 'Header');

  // field_footer (text_long)
  _uic_config_ensure_field_storage($entityType, 'field_footer', 'text_long', [], 1);
  _uic_config_ensure_field_instance($entityType, $bundle, 'field_footer', 'Footer');

  // field_gallery (media reference, multiple)
  _uic_config_ensure_field_storage(
    $entityType,
    'field_gallery',
    'entity_reference',
    [
      'target_type' => 'media',
    ],
    -1
  );
  _uic_config_ensure_field_instance(
    $entityType,
    $bundle,
    'field_gallery',
    'Gallery',
    [
      'handler' => 'default:media',
      'handler_settings' => [
        'target_bundles' => NULL,
      ],
    ]
  );

  // field_attachments (media reference, multiple)
  _uic_config_ensure_field_storage(
    $entityType,
    'field_attachments',
    'entity_reference',
    [
      'target_type' => 'media',
    ],
    -1
  );
  _uic_config_ensure_field_instance(
    $entityType,
    $bundle,
    'field_attachments',
    'Attachments',
    [
      'handler' => 'default:media',
      'handler_settings' => [
        'target_bundles' => NULL,
      ],
    ]
  );

  // field_spip_id (string)
  _uic_config_ensure_field_storage($entityType, 'field_spip_id', 'string', ['max_length' => 255], 1);
  _uic_config_ensure_field_instance($entityType, $bundle, 'field_spip_id', 'SPIP ID');

  // field_spip_url (string)
  _uic_config_ensure_field_storage($entityType, 'field_spip_url', 'string', ['max_length' => 2048], 1);
  _uic_config_ensure_field_instance($entityType, $bundle, 'field_spip_url', 'SPIP URL');

  // field_featured_image (entity_reference to Media) - same storage as Article
  _uic_config_ensure_field_storage($entityType, 'field_featured_image', 'entity_reference', [
    'target_type' => 'media',
  ], 1);
  _uic_config_ensure_field_instance($entityType, $bundle, 'field_featured_image', 'Featured Image', [
    'handler' => 'default:media',
    'handler_settings' => [
      'target_bundles' => ['image' => 'image'],
      'sort' => ['field' => '_none'],
      'auto_create' => FALSE,
      'auto_create_bundle' => '',
    ],
  ]);
}

/**
 * Configure Activity page form and view displays (non-destructive).
 */
function _uic_config_configure_activity_page_displays(): void {
  $formDisplay = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('node.activity_page.default');

  if ($formDisplay) {
    $components = [
      'title' => ['type' => 'string_textfield', 'weight' => 0, 'settings' => ['size' => 60, 'placeholder' => '']],
      'body' => ['type' => 'text_textarea_with_summary', 'weight' => 1, 'settings' => ['rows' => 9, 'summary_rows' => 3]],
      'field_subtitle' => ['type' => 'string_textfield', 'weight' => 2, 'settings' => ['size' => 60, 'placeholder' => '']],
      'field_featured_image' => ['type' => 'media_library_widget', 'weight' => 3, 'settings' => ['media_types' => []]],
      'field_header' => ['type' => 'text_textarea', 'weight' => 4, 'settings' => ['rows' => 5, 'placeholder' => '']],
      'field_footer' => ['type' => 'text_textarea', 'weight' => 5, 'settings' => ['rows' => 5, 'placeholder' => '']],
      'field_gallery' => ['type' => 'media_library_widget', 'weight' => 6, 'settings' => ['media_types' => []]],
      'field_attachments' => ['type' => 'media_library_widget', 'weight' => 7, 'settings' => ['media_types' => []]],
      'field_spip_id' => ['type' => 'string_textfield', 'weight' => 8, 'settings' => ['size' => 60, 'placeholder' => '']],
      'field_spip_url' => ['type' => 'string_textfield', 'weight' => 9, 'settings' => ['size' => 60, 'placeholder' => '']],
    ];

    $changed = FALSE;
    foreach ($components as $name => $definition) {
      if ($formDisplay->getComponent($name) === NULL) {
        $formDisplay->setComponent($name, $definition);
        $changed = TRUE;
      }
    }
    if ($changed) {
      $formDisplay->save();
    }
  }

  $viewDisplay = \Drupal::entityTypeManager()
    ->getStorage('entity_view_display')
    ->load('node.activity_page.default');

  if ($viewDisplay) {
    // Hide auxiliary fields by default; body typically shown by theme/display.
    $hide = [
      'field_subtitle',
      'field_featured_image',
      'field_header',
      'field_footer',
      'field_gallery',
      'field_attachments',
      'field_spip_id',
      'field_spip_url',
    ];

    $changed = FALSE;
    foreach ($hide as $name) {
      if ($viewDisplay->getComponent($name) !== NULL) {
        $viewDisplay->removeComponent($name);
        $changed = TRUE;
      }
    }
    if ($changed) {
      $viewDisplay->save();
    }
  }
}

/**
 * Create field instance if missing.
 */
function _uic_config_ensure_field_instance(string $entityType, string $bundle, string $fieldName, string $label, array $fieldSettings = [], array $widget = []): void {
  $existing = FieldConfig::loadByName($entityType, $bundle, $fieldName);
  if ($existing) {
    return;
  }

  FieldConfig::create([
    'field_name' => $fieldName,
    'entity_type' => $entityType,
    'bundle' => $bundle,
    'label' => $label,
    'settings' => $fieldSettings,
  ])->save();
}

/**
 * Create all Project Page fields in an idempotent way.
 */
function _uic_config_create_project_page_fields(): void {
  $entityType = 'node';
  $bundle = 'project_page';

  // Check if Project Page content type exists
  if (!NodeType::load($bundle)) {
    // If Project Page is missing, do nothing; it might be created elsewhere
    return;
  }

  // field_featured_image (entity_reference to Media) - same storage as Article
  _uic_config_ensure_field_storage($entityType, 'field_featured_image', 'entity_reference', [
    'target_type' => 'media',
  ], 1);
  _uic_config_ensure_field_instance($entityType, $bundle, 'field_featured_image', 'Featured Image', [
    'handler' => 'default:media',
    'handler_settings' => [
      'target_bundles' => ['image' => 'image'],
      'sort' => ['field' => '_none'],
      'auto_create' => FALSE,
      'auto_create_bundle' => '',
    ],
  ]);
}

/**
 * Configure Project Page form and view displays (non-destructive).
 */
function _uic_config_configure_project_page_displays(): void {
  $formDisplay = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('node.project_page.default');

  if ($formDisplay) {
    $components = [
      'field_featured_image' => ['type' => 'media_library_widget', 'weight' => 3, 'settings' => ['media_types' => []]],
    ];

    $changed = FALSE;
    foreach ($components as $name => $definition) {
      if ($formDisplay->getComponent($name) === NULL) {
        $formDisplay->setComponent($name, $definition);
        $changed = TRUE;
      }
    }
    if ($changed) {
      $formDisplay->save();
    }
  }

  $viewDisplay = \Drupal::entityTypeManager()
    ->getStorage('entity_view_display')
    ->load('node.project_page.default');

  if ($viewDisplay) {
    // Hide featured_image by default in view display
    $hide = [
      'field_featured_image',
    ];

    $changed = FALSE;
    foreach ($hide as $name) {
      if ($viewDisplay->getComponent($name) !== NULL) {
        $viewDisplay->removeComponent($name);
        $changed = TRUE;
      }
    }
    if ($changed) {
      $viewDisplay->save();
    }
  }
}

/**
 * Create all Article fields in an idempotent way.
 */
function _uic_config_create_article_fields(): void {
  $entityType = 'node';
  $bundle = 'article';

  // Ensure the core Article content type exists (it does in this distro).
  if (!NodeType::load($bundle)) {
    // If Article is missing, do nothing; site may not use it.
    return;
  }

  // field_subtitle (string)
  _uic_config_ensure_field_storage($entityType, 'field_subtitle', 'string', ['max_length' => 255], 1);
  _uic_config_ensure_field_instance($entityType, $bundle, 'field_subtitle', 'Subtitle');

  // field_header (text_long)
  _uic_config_ensure_field_storage($entityType, 'field_header', 'text_long', [], 1);
  _uic_config_ensure_field_instance($entityType, $bundle, 'field_header', 'Header');

  // field_footer (text_long)
  _uic_config_ensure_field_storage($entityType, 'field_footer', 'text_long', [], 1);
  _uic_config_ensure_field_instance($entityType, $bundle, 'field_footer', 'Footer');

  // field_gallery (media reference, multiple)
  _uic_config_ensure_field_storage(
    $entityType,
    'field_gallery',
    'entity_reference',
    [
      'target_type' => 'media',
    ],
    -1
  );
  _uic_config_ensure_field_instance(
    $entityType,
    $bundle,
    'field_gallery',
    'Gallery',
    [
      'handler' => 'default:media',
      'handler_settings' => [
        // Allow all media types by default; can be restricted in UI later.
        'target_bundles' => NULL,
      ],
    ]
  );

  // field_attachments (media reference, multiple)
  _uic_config_ensure_field_storage(
    $entityType,
    'field_attachments',
    'entity_reference',
    [
      'target_type' => 'media',
    ],
    -1
  );
  _uic_config_ensure_field_instance(
    $entityType,
    $bundle,
    'field_attachments',
    'Attachments',
    [
      'handler' => 'default:media',
      'handler_settings' => [
        'target_bundles' => NULL,
      ],
    ]
  );

  // field_spip_id (string)
  _uic_config_ensure_field_storage($entityType, 'field_spip_id', 'string', ['max_length' => 255], 1);
  _uic_config_ensure_field_instance($entityType, $bundle, 'field_spip_id', 'SPIP ID');

  // field_spip_url (string)
  _uic_config_ensure_field_storage($entityType, 'field_spip_url', 'string', ['max_length' => 2048], 1);
  _uic_config_ensure_field_instance($entityType, $bundle, 'field_spip_url', 'SPIP URL');

  // field_featured_image (entity_reference to Media)
  _uic_config_ensure_field_storage($entityType, 'field_featured_image', 'entity_reference', [
    'target_type' => 'media',
  ], 1);
  _uic_config_ensure_field_instance($entityType, $bundle, 'field_featured_image', 'Featured Image', [
    'handler' => 'default:media',
    'handler_settings' => [
      'target_bundles' => ['image' => 'image'],
      'sort' => ['field' => '_none'],
      'auto_create' => FALSE,
      'auto_create_bundle' => '',
    ],
  ]);

  // Note: field_tags exists by default in Drupal 10 Article content type
}

/**
 * Configure Article form and view displays (non-destructive).
 */
function _uic_config_configure_article_displays(): void {
  $formDisplay = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('node.article.default');

  if ($formDisplay) {
    $components = [
      'field_subtitle' => ['type' => 'string_textfield', 'weight' => 7, 'settings' => ['size' => 60, 'placeholder' => '']],
      'field_featured_image' => ['type' => 'media_library_widget', 'weight' => 8, 'settings' => ['media_types' => []]],
      'field_header' => ['type' => 'text_textarea', 'weight' => 9, 'settings' => ['rows' => 5, 'placeholder' => '']],
      'field_footer' => ['type' => 'text_textarea', 'weight' => 12, 'settings' => ['rows' => 5, 'placeholder' => '']],
      'field_gallery' => ['type' => 'media_library_widget', 'weight' => 13, 'settings' => ['media_types' => []]],
      'field_attachments' => ['type' => 'media_library_widget', 'weight' => 14, 'settings' => ['media_types' => []]],
      'field_spip_id' => ['type' => 'string_textfield', 'weight' => 15, 'settings' => ['size' => 60, 'placeholder' => '']],
      'field_spip_url' => ['type' => 'string_textfield', 'weight' => 16, 'settings' => ['size' => 60, 'placeholder' => '']],
    ];

    $changed = FALSE;
    foreach ($components as $name => $definition) {
      if ($formDisplay->getComponent($name) === NULL) {
        $formDisplay->setComponent($name, $definition);
        $changed = TRUE;
      }
    }
    if ($changed) {
      $formDisplay->save();
    }
  }

  $viewDisplay = \Drupal::entityTypeManager()
    ->getStorage('entity_view_display')
    ->load('node.article.default');

  if ($viewDisplay) {
    // Hide by default; site can enable where needed.
    $hide = [
      'field_subtitle',
      'field_header',
      'field_footer',
      'field_gallery',
      'field_attachments',
      'field_spip_id',
      'field_spip_url',
    ];

    $changed = FALSE;
    foreach ($hide as $name) {
      if ($viewDisplay->getComponent($name) !== NULL) {
        $viewDisplay->removeComponent($name);
        $changed = TRUE;
      }
    }
    if ($changed) {
      $viewDisplay->save();
    }
  }
}

/**
 * Configure GraphQL Compose to expose custom fields (non-destructive).
 */
function _uic_config_configure_graphql_compose(): void {
  if (!\Drupal::moduleHandler()->moduleExists('graphql_compose')) {
    return;
  }

  $config = \Drupal::configFactory()->getEditable('graphql_compose.settings');
  $entityConfig = $config->get('entity_config') ?: [];
  $fieldConfig = $config->get('field_config') ?: [];

  $entityConfig['node'] = $entityConfig['node'] ?? [];
  $entityConfig['node']['activity_page'] = $entityConfig['node']['activity_page'] ?? [
    'enabled' => TRUE,
    'query_load_enabled' => TRUE,
    'edges_enabled' => TRUE,
    'routes_enabled' => TRUE,
  ];
  $entityConfig['node']['article'] = $entityConfig['node']['article'] ?? [
    'enabled' => TRUE,
    'query_load_enabled' => TRUE,
    'edges_enabled' => TRUE,
    'routes_enabled' => TRUE,
  ];

  $fieldConfig['node'] = $fieldConfig['node'] ?? [];
  $fieldConfig['node']['activity_page'] = $fieldConfig['node']['activity_page'] ?? [];
  $fieldConfig['node']['article'] = $fieldConfig['node']['article'] ?? [];

  foreach ([
    'field_subtitle',
    'field_header',
    'field_footer',
    'field_gallery',
    'field_attachments',
    'field_spip_id',
    'field_spip_url',
  ] as $name) {
    if (!isset($fieldConfig['node']['article'][$name])) {
      $fieldConfig['node']['article'][$name] = ['enabled' => TRUE];
    }
  }

  foreach ([
    'body',
    'field_subtitle',
    'field_header',
    'field_footer',
    'field_gallery',
    'field_attachments',
    'field_spip_id',
    'field_spip_url',
  ] as $name) {
    if (!isset($fieldConfig['node']['activity_page'][$name])) {
      $fieldConfig['node']['activity_page'][$name] = ['enabled' => TRUE];
    }
  }

  $config->set('entity_config', $entityConfig);
  $config->set('field_config', $fieldConfig);
  $config->save();

  \Drupal::service('cache_tags.invalidator')->invalidateTags(['graphql_compose_schema']);
}

/**
 * Update: Add Activity page content type and fields for existing installs.
 */
function uic_config_update_9001(): void {
  _uic_config_create_activity_page_content_type();
  _uic_config_create_activity_page_fields();
  _uic_config_configure_activity_page_displays();
  _uic_config_configure_graphql_compose();
}

/**
 * Ensure all custom fields are properly displayed in form displays.
 */
function _uic_config_ensure_all_form_displays(): void {
  // Configuration for each content type
  $content_types = [
    'article' => [
      // Title (weight 0 - handled by core)
      'title' => ['type' => 'string_textfield', 'weight' => 0, 'settings' => ['size' => 60, 'placeholder' => '']],
      // Subtitle 
      'field_subtitle' => ['type' => 'string_textfield', 'weight' => 1, 'settings' => ['size' => 60, 'placeholder' => '']],
      // Featured Image (media library widget like gallery)
      'field_featured_image' => ['type' => 'media_library_widget', 'weight' => 2, 'settings' => ['media_types' => []]],
      // Header
      'field_header' => ['type' => 'text_textarea', 'weight' => 3, 'settings' => ['rows' => 5, 'placeholder' => '']],
      // Body (weight 4 - handled by core)
      'body' => ['type' => 'text_textarea_with_summary', 'weight' => 4, 'settings' => ['rows' => 9, 'summary_rows' => 3]],
      // Footer
      'field_footer' => ['type' => 'text_textarea', 'weight' => 5, 'settings' => ['rows' => 5, 'placeholder' => '']],
      // Gallery
      'field_gallery' => ['type' => 'media_library_widget', 'weight' => 6, 'settings' => ['media_types' => []]],
      // Attachments  
      'field_attachments' => ['type' => 'media_library_widget', 'weight' => 7, 'settings' => ['media_types' => []]],
      // Tags (entity reference autocomplete with tags style)
      'field_tags' => ['type' => 'entity_reference_autocomplete_tags', 'weight' => 8, 'settings' => ['match_operator' => 'CONTAINS', 'match_limit' => 10, 'size' => 60, 'placeholder' => '']],
      // Language (weight handled by core)
      // Translation (weight handled by core)  
      // Authored by (weight handled by core)
      // Authored on (weight handled by core)
      // Other core fields have their own weights
      // SPIP fields at the end
      'field_spip_id' => ['type' => 'string_textfield', 'weight' => 50, 'settings' => ['size' => 60, 'placeholder' => '']],
      'field_spip_url' => ['type' => 'string_textfield', 'weight' => 51, 'settings' => ['size' => 60, 'placeholder' => '']],
    ],
    'activity_page' => [
      'field_subtitle' => ['type' => 'string_textfield', 'weight' => 2, 'settings' => ['size' => 60, 'placeholder' => '']],
      'field_featured_image' => ['type' => 'media_library_widget', 'weight' => 3, 'settings' => ['media_types' => []]],
      'field_header' => ['type' => 'text_textarea', 'weight' => 4, 'settings' => ['rows' => 5, 'placeholder' => '']],
      'field_footer' => ['type' => 'text_textarea', 'weight' => 5, 'settings' => ['rows' => 5, 'placeholder' => '']],
      'field_gallery' => ['type' => 'media_library_widget', 'weight' => 6, 'settings' => ['media_types' => []]],
      'field_attachments' => ['type' => 'media_library_widget', 'weight' => 7, 'settings' => ['media_types' => []]],
      'field_spip_id' => ['type' => 'string_textfield', 'weight' => 8, 'settings' => ['size' => 60, 'placeholder' => '']],
      'field_spip_url' => ['type' => 'string_textfield', 'weight' => 9, 'settings' => ['size' => 60, 'placeholder' => '']],
    ],
    'project_page' => [
      'field_featured_image' => ['type' => 'media_library_widget', 'weight' => 3, 'settings' => ['media_types' => []]],
    ],
  ];

  foreach ($content_types as $bundle => $fields) {
    $formDisplay = \Drupal::entityTypeManager()
      ->getStorage('entity_form_display')
      ->load("node.{$bundle}.default");

    if ($formDisplay) {
      $changed = FALSE;
      foreach ($fields as $field_name => $field_config) {
        // Force add/update field component
        $formDisplay->setComponent($field_name, $field_config);
        $changed = TRUE;
      }
      if ($changed) {
        $formDisplay->save();
        \Drupal::logger('uic_config')->info('Updated form display for @bundle with all custom fields', ['@bundle' => $bundle]);
      }
    }
  }

  // Disable specific fields for article
  _uic_config_disable_article_fields();
}

/**
 * Disable specific fields in article form display.
 */
function _uic_config_disable_article_fields(): void {
  $formDisplay = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('node.article.default');

  if ($formDisplay) {
    $fields_to_disable = ['field_excerpt', 'field_image'];
    $changed = FALSE;
    
    foreach ($fields_to_disable as $field_name) {
      if ($formDisplay->getComponent($field_name) !== NULL) {
        $formDisplay->removeComponent($field_name);
        $changed = TRUE;
      }
    }
    
    if ($changed) {
      $formDisplay->save();
      \Drupal::logger('uic_config')->info('Disabled fields in article form display: @fields', ['@fields' => implode(', ', $fields_to_disable)]);
    }
  }
}


