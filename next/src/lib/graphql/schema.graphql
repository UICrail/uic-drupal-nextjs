schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

input ArticlesViewFilterInput {
  """Translation language """
  langcode: String
  """Sticky status """
  sticky: Boolean
}

"""Result for view articles display graphql_1."""
type ArticlesViewResult implements View {
  """The description of the view."""
  description: String
  """The machine name of the display."""
  display: String!
  """Exposed filters for the view."""
  filters: [ViewFilter]!
  """The ID of the view."""
  id: ID!
  """The human friendly label of the view."""
  label: String
  """The language code of the view."""
  langcode: String
  """Information about the page in the view."""
  pageInfo: ViewPageInfo!
  """The results of the view."""
  results: [NodeUnion!]!
  """The machine name of the view."""
  view: String!
}

"""A paginated set of results."""
interface Connection {
  """The edges of this connection."""
  edges: [Edge!]!
  """The nodes of the edges of this connection."""
  nodes: [EdgeNode!]!
  """Information to aid in pagination."""
  pageInfo: ConnectionPageInfo!
}

"""Information about the page in a connection."""
type ConnectionPageInfo {
  """The cursor for the last element in this page."""
  endCursor: Cursor
  """Whether there are more pages in this connection."""
  hasNextPage: Boolean!
  """Whether there are previous pages in this connection."""
  hasPreviousPage: Boolean!
  """The cursor for the first element in this page."""
  startCursor: Cursor
}

"""Choose how your sorts will occur and on which field."""
enum ConnectionSortKeys {
  """Sort by creation date"""
  CREATED_AT
  """Sort by promoted status."""
  PROMOTED
  """Sort by sticky status."""
  STICKY
  """Sort by entity title."""
  TITLE
  """Sort by updated date"""
  UPDATED_AT
  """Sort by term weight."""
  WEIGHT
}

"""A cursor for use in pagination."""
scalar Cursor

"""A Date range has a start and an end."""
type DateRange {
  """The end of the date range."""
  end: DateTime
  """The start of the date range."""
  start: DateTime
}

"""A DateTime object."""
type DateTime {
  """A string that will have a value of format Â±hh:mm"""
  offset: UtcOffset!
  """RFC 3339 compliant time string."""
  time: Time!
  """
  Type represents date and time as number of milliseconds from start of the UNIX epoch.
  """
  timestamp: Timestamp!
  """A field whose value exists in the standard IANA Time Zone Database."""
  timezone: TimeZone!
}

"""
An edge in a connection.
Provides the cursor to fetch data based on the position of the associated
node. Specific edge implementations may provide more information about the
relationship they represent.
"""
interface Edge {
  cursor: Cursor!
  node: EdgeNode!
}

"""This entity is accessible over an Edge connection."""
interface EdgeNode {
  id: ID!
}

"""An email address."""
scalar Email

"""A file object to represent an managed file."""
type File {
  """The description of the file."""
  description: String
  """The mime type of the file."""
  mime: String
  """The name of the file."""
  name: String
  """The size of the file in bytes."""
  size: Int!
  """The URL of the file."""
  url: String!
}

"""
An HTML string

Content of this type is deemed safe by the server for raw output given the
origin and the context of its usage. The HTML can still contain scripts or style
tags where the creating user had permission to input these.
"""
scalar Html

"""A image object to represent an managed file."""
type Image {
  """The alt text of the image."""
  alt: String
  """The height of the image."""
  height: Int!
  """The mime type of the image."""
  mime: String
  """The size of the image in bytes."""
  size: Int!
  """The title text of the image."""
  title: String
  """The URL of the image."""
  url: String!
  """The width of the image."""
  width: Int!
}

"""Generic input for key-value pairs."""
input KeyValueInput {
  key: String!
  value: String
}

"""A language definition provided by the CMS."""
type Language {
  """The language direction."""
  direction: String
  """The language code."""
  id: ID
  """The language name."""
  name: String
}

"""A link."""
type Link {
  """Whether the link is internal to this website."""
  internal: Boolean!
  """The title of the link."""
  title: String
  """The URL of the link."""
  url: String
}

"""A locally hosted audio file."""
type MediaAudio implements EdgeNode & MediaInterface & MetaTagInterface {
  """The time the media item was last edited."""
  changed: DateTime!
  """The time the media item was created."""
  created: DateTime!
  """The entity ID."""
  id: ID!
  """Language"""
  langcode: Language!
  """Audio file"""
  mediaAudioFile: File!
  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!
  """Name"""
  name: String!
  """URL alias"""
  path: String!
  """Published"""
  status: Boolean!
  """Available translations for content."""
  translations: [Translation]!
  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
}

"""A paginated set of results for MediaAudio."""
type MediaAudioConnection implements Connection {
  edges: [MediaAudioEdge!]!
  nodes: [MediaAudio!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for MediaAudio."""
type MediaAudioEdge implements Edge {
  cursor: Cursor!
  node: MediaAudio!
}

"""An uploaded file or document, such as a PDF."""
type MediaDocument implements EdgeNode & MediaInterface & MetaTagInterface {
  """The time the media item was last edited."""
  changed: DateTime!
  """The time the media item was created."""
  created: DateTime!
  """The entity ID."""
  id: ID!
  """Language"""
  langcode: Language!
  """Document"""
  mediaDocument: File!
  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!
  """Name"""
  name: String!
  """URL alias"""
  path: String!
  """Published"""
  status: Boolean!
  """Available translations for content."""
  translations: [Translation]!
  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
}

"""A paginated set of results for MediaDocument."""
type MediaDocumentConnection implements Connection {
  edges: [MediaDocumentEdge!]!
  nodes: [MediaDocument!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for MediaDocument."""
type MediaDocumentEdge implements Edge {
  cursor: Cursor!
  node: MediaDocument!
}

"""Use local images for reusable media."""
type MediaImage implements EdgeNode & MediaInterface & MetaTagInterface {
  """The time the media item was last edited."""
  changed: DateTime!
  """The time the media item was created."""
  created: DateTime!
  """The entity ID."""
  id: ID!
  """Language"""
  langcode: Language!
  """Image"""
  mediaImage: Image!
  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!
  """Name"""
  name: String!
  """URL alias"""
  path: String!
  """Published"""
  status: Boolean!
  """Available translations for content."""
  translations: [Translation]!
  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
}

"""A paginated set of results for MediaImage."""
type MediaImageConnection implements Connection {
  edges: [MediaImageEdge!]!
  nodes: [MediaImage!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for MediaImage."""
type MediaImageEdge implements Edge {
  cursor: Cursor!
  node: MediaImage!
}

"""Entity type media."""
interface MediaInterface {
  """The time the media item was last edited."""
  changed: DateTime!
  """The time the media item was created."""
  created: DateTime!
  """The entity ID."""
  id: ID!
  """Language"""
  langcode: Language!
  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!
  """Name"""
  name: String!
  """URL alias"""
  path: String!
  """Published"""
  status: Boolean!
  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
}

"""A remotely hosted video from YouTube or Vimeo."""
type MediaRemoteVideo implements EdgeNode & MediaInterface & MetaTagInterface {
  """The time the media item was last edited."""
  changed: DateTime!
  """The time the media item was created."""
  created: DateTime!
  """The entity ID."""
  id: ID!
  """Language"""
  langcode: Language!
  """Video URL"""
  mediaOembedVideo: String!
  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!
  """Name"""
  name: String!
  """URL alias"""
  path: String!
  """Published"""
  status: Boolean!
  """Available translations for content."""
  translations: [Translation]!
  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
}

"""A paginated set of results for MediaRemoteVideo."""
type MediaRemoteVideoConnection implements Connection {
  edges: [MediaRemoteVideoEdge!]!
  nodes: [MediaRemoteVideo!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for MediaRemoteVideo."""
type MediaRemoteVideoEdge implements Edge {
  cursor: Cursor!
  node: MediaRemoteVideo!
}

"""Entity type media."""
union MediaUnion = MediaAudio | MediaDocument | MediaImage | MediaRemoteVideo | MediaVideo

"""A locally hosted video file."""
type MediaVideo implements EdgeNode & MediaInterface & MetaTagInterface {
  """The time the media item was last edited."""
  changed: DateTime!
  """The time the media item was created."""
  created: DateTime!
  """The entity ID."""
  id: ID!
  """Language"""
  langcode: Language!
  """Video file"""
  mediaVideoFile: File!
  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!
  """Name"""
  name: String!
  """URL alias"""
  path: String!
  """Published"""
  status: Boolean!
  """Available translations for content."""
  translations: [Translation]!
  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
}

"""A paginated set of results for MediaVideo."""
type MediaVideoConnection implements Connection {
  edges: [MediaVideoEdge!]!
  nodes: [MediaVideo!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for MediaVideo."""
type MediaVideoEdge implements Edge {
  cursor: Cursor!
  node: MediaVideo!
}

"""Entity type menu."""
type Menu implements MenuInterface {
  """The entity ID."""
  id: ID!
  """The menu items."""
  items: [MenuItem!]!
  """The menu name."""
  name: String!
  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
}

"""List of menus available to load."""
enum MenuAvailable {
  """Footer"""
  FOOTER
  """Main navigation"""
  MAIN
}

"""Entity type menu."""
interface MenuInterface {
  """The entity ID."""
  id: ID!
  """The menu items."""
  items: [MenuItem!]!
  """The menu name."""
  name: String!
  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
}

"""A menu item defined in the CMS."""
type MenuItem {
  """Attributes of this menu item."""
  attributes: MenuItemAttributes!
  """Child menu items of this menu item."""
  children: [MenuItem!]!
  """The description of the menu item."""
  description: String
  """Whether this menu item is intended to be expanded."""
  expanded: Boolean!
  """The Universally Unique IDentifier (UUID)."""
  id: ID!
  """Whether this menu item links to an internal route."""
  internal: Boolean!
  """The language of the menu item."""
  langcode: Language!
  """
  The route this menu item uses. Route loading can be disabled per menu type.
  """
  route: RouteUnion
  """The title of the menu item."""
  title: String!
  """The URL of the menu item."""
  url: String
}

"""Menu item options set within the CMS."""
type MenuItemAttributes {
  class: String
  """Menu item attribute icon."""
  icon: String
}

"""Entity type menu."""
union MenuUnion = Menu

"""A meta tag element."""
interface MetaTag {
  """The HTML tag for this meta element."""
  tag: String!
}

"""This entity has meta tags enabled."""
interface MetaTagInterface {
  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!
}

"""A meta link element."""
type MetaTagLink implements MetaTag {
  """The meta tag element attributes."""
  attributes: MetaTagLinkAttributes!
  """The HTML tag for this meta element."""
  tag: String!
}

"""A meta link element's attributes."""
type MetaTagLinkAttributes {
  """Specifies the location of the linked document."""
  href: String
  """Specifies the location of the linked document."""
  hreflang: String
  """Specifies on what device the linked document will be displayed."""
  media: String
  """
  Specifies the relationship between the current document and the linked document.
  """
  rel: String
  """Specifies the size of the linked resource. Only for rel="icon"."""
  sizes: String
  """Specifies the media type of the linked document."""
  type: String
}

"""A meta property element."""
type MetaTagProperty implements MetaTag {
  """The meta tag element attributes."""
  attributes: MetaTagPropertyAttributes!
  """The HTML tag for this meta element."""
  tag: String!
}

"""A meta property element's attributes."""
type MetaTagPropertyAttributes {
  """The content attribute of the meta tag."""
  content: String
  """The property attribute of the meta tag."""
  property: String
}

"""A meta script element."""
type MetaTagScript implements MetaTag {
  """The meta tag element attributes."""
  attributes: MetaTagScriptAttributes!
  """The content of the script tag."""
  content: String
  """The HTML tag for this meta element."""
  tag: String!
}

"""A meta script element's attributes."""
type MetaTagScriptAttributes {
  """The integrity attribute of the script tag."""
  integrity: String
  """The src attribute of the script tag."""
  src: String
  """The type attribute of the script tag."""
  type: String
}

"""A meta tag element."""
union MetaTagUnion = MetaTagLink | MetaTagProperty | MetaTagScript | MetaTagValue

"""A meta content element."""
type MetaTagValue implements MetaTag {
  """The meta tag element attributes."""
  attributes: MetaTagValueAttributes!
  """The HTML tag for this meta element."""
  tag: String!
}

"""A meta content element's attributes."""
type MetaTagValueAttributes {
  """The content attribute of the meta tag."""
  content: String
  """The name attribute of the meta tag."""
  name: String
}

"""The schema's entry-point for mutations."""
type Mutation {
  """Placeholder for mutation extension."""
  _: Boolean!
}

"""
Use <em>articles</em> for time-sensitive content like news, press releases or blog posts.
"""
type NodeArticle implements EdgeNode & MetaTagInterface & NodeInterface {
  """The author of this content."""
  author: User
  """Body"""
  body: TextSummary
  """The time that the node was last edited."""
  changed: DateTime!
  """The date and time that the content was created."""
  created: DateTime!
  """
  Add an excerpt for this piece of content. It will also be used for search results and HTML meta tags.
  """
  excerpt: String
  """The entity ID."""
  id: ID!
  """Image"""
  image: Image
  """Language"""
  langcode: Language!
  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!
  """URL alias"""
  path: String!
  """Promoted to front page"""
  promote: Boolean!
  """Published"""
  status: Boolean!
  """Sticky at top of lists"""
  sticky: Boolean!
  """
  Enter a comma-separated list. For example: Amsterdam, Mexico City, "Cleveland, Ohio"
  """
  tags: [UnsupportedType!]
  """Title"""
  title: String!
  """Available translations for content."""
  translations: [Translation]!
  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
}

"""A paginated set of results for NodeArticle."""
type NodeArticleConnection implements Connection {
  edges: [NodeArticleEdge!]!
  nodes: [NodeArticle!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for NodeArticle."""
type NodeArticleEdge implements Edge {
  cursor: Cursor!
  node: NodeArticle!
}

"""
Represents the frontpage of the site. Only one content of this type can be created.
"""
type NodeFrontpage implements MetaTagInterface & NodeInterface {
  """The author of this content."""
  author: User
  """The time that the node was last edited."""
  changed: DateTime!
  """Content elements"""
  contentElements: [NodeFrontpageContentElementsUnion!]!
  """The date and time that the content was created."""
  created: DateTime!
  """
  Add an excerpt for this piece of content. It will also be used for search results and HTML meta tags.
  """
  excerpt: String
  """The entity ID."""
  id: ID!
  """
  Image used in the search results and for Open Graph HTML meta tags, so that sharing the content looks good.
  """
  image: Image
  """Language"""
  langcode: Language!
  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!
  """URL alias"""
  path: String!
  """Promoted to front page"""
  promote: Boolean!
  """Published"""
  status: Boolean!
  """Sticky at top of lists"""
  sticky: Boolean!
  """Title"""
  title: String!
  """Available translations for content."""
  translations: [Translation]!
  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
}

"""Content elements"""
union NodeFrontpageContentElementsUnion = ParagraphAccordion | ParagraphFileAttachment | ParagraphFormattedText | ParagraphHero | ParagraphImage | ParagraphLiftupsArticle | ParagraphLink | ParagraphListingArticle | ParagraphVideo

"""Entity type node."""
interface NodeInterface {
  """The author of this content."""
  author: User
  """The time that the node was last edited."""
  changed: DateTime!
  """The date and time that the content was created."""
  created: DateTime!
  """The entity ID."""
  id: ID!
  """Language"""
  langcode: Language!
  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!
  """URL alias"""
  path: String!
  """Promoted to front page"""
  promote: Boolean!
  """Published"""
  status: Boolean!
  """Sticky at top of lists"""
  sticky: Boolean!
  """Title"""
  title: String!
  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
}

"""Page content type. Contains paragraphs."""
type NodePage implements EdgeNode & MetaTagInterface & NodeInterface {
  """The author of this content."""
  author: User
  """The time that the node was last edited."""
  changed: DateTime!
  """Content elements"""
  contentElements: [NodePageContentElementsUnion!]!
  """The date and time that the content was created."""
  created: DateTime!
  """
  Add an excerpt for this piece of content. It will also be used for search results and HTML meta tags.
  """
  excerpt: String
  """The entity ID."""
  id: ID!
  """
  Image used in the search results and for Open Graph HTML meta tags, so that sharing the content looks good.
  """
  image: Image
  """Language"""
  langcode: Language!
  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!
  """URL alias"""
  path: String!
  """Promoted to front page"""
  promote: Boolean!
  """Published"""
  status: Boolean!
  """Sticky at top of lists"""
  sticky: Boolean!
  """Title"""
  title: String!
  """Available translations for content."""
  translations: [Translation]!
  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
}

"""A paginated set of results for NodePage."""
type NodePageConnection implements Connection {
  edges: [NodePageEdge!]!
  nodes: [NodePage!]!
  pageInfo: ConnectionPageInfo!
}

"""Content elements"""
union NodePageContentElementsUnion = ParagraphAccordion | ParagraphFileAttachment | ParagraphFormattedText | ParagraphHero | ParagraphImage | ParagraphLiftupsArticle | ParagraphLink | ParagraphListingArticle | ParagraphVideo

"""Edge for NodePage."""
type NodePageEdge implements Edge {
  cursor: Cursor!
  node: NodePage!
}

"""Entity type node."""
union NodeUnion = NodeArticle | NodeFrontpage | NodePage

"""This paragraph type holds an accordion."""
type ParagraphAccordion implements ParagraphInterface {
  """Accordion items"""
  accordionItems: [ParagraphAccordionItem!]!
  """Select the layout for this accordion paragraph."""
  accordionLayout: String!
  """The time that the Paragraph was created."""
  created: DateTime!
  """Formatted text"""
  formattedText: Text
  """Heading for the whole accordion"""
  heading: String
  """The entity ID."""
  id: ID!
  """The paragraphs entity language code."""
  langcode: Language!
  """Primary link"""
  primaryLink: Link
  """Published"""
  status: Boolean!
  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
}

"""
This paragraph holds an accordion item, with a title and other paragraphs as content.
"""
type ParagraphAccordionItem implements ParagraphInterface {
  """Add one or more paragraphs to display in this accordion item."""
  contentElements: [ParagraphAccordionItemContentElementsUnion!]!
  """The time that the Paragraph was created."""
  created: DateTime!
  """Formatted text"""
  formattedText: Text
  """Heading"""
  heading: String!
  """The entity ID."""
  id: ID!
  """The paragraphs entity language code."""
  langcode: Language!
  """Published"""
  status: Boolean!
  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
}

"""Add one or more paragraphs to display in this accordion item."""
union ParagraphAccordionItemContentElementsUnion = ParagraphFileAttachment | ParagraphFormattedText | ParagraphImage | ParagraphLink | ParagraphVideo

"""Entity type paragraph."""
type ParagraphFileAttachment implements ParagraphInterface {
  """The time that the Paragraph was created."""
  created: DateTime!
  """File attachments"""
  fileAttachments: [MediaDocument!]!
  """Formatted text"""
  formattedText: Text
  """Heading"""
  heading: String
  """The entity ID."""
  id: ID!
  """The paragraphs entity language code."""
  langcode: Language!
  """Published"""
  status: Boolean!
  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
}

"""A paragraph containing formatted text"""
type ParagraphFormattedText implements ParagraphInterface {
  """The time that the Paragraph was created."""
  created: DateTime!
  """Formatted text"""
  formattedText: Text!
  """Heading"""
  heading: String
  """The entity ID."""
  id: ID!
  """The paragraphs entity language code."""
  langcode: Language!
  """Published"""
  status: Boolean!
  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
}

"""Entity type paragraph."""
type ParagraphHero implements ParagraphInterface {
  """The time that the Paragraph was created."""
  created: DateTime!
  """Formatted text"""
  formattedText: Text
  """Heading"""
  heading: String!
  """The entity ID."""
  id: ID!
  """Image"""
  image: MediaImage!
  """The paragraphs entity language code."""
  langcode: Language!
  """Primary link"""
  primaryLink: Link
  """Secondary link"""
  secondaryLink: Link
  """Published"""
  status: Boolean!
  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
}

"""A paragraph containing an image."""
type ParagraphImage implements ParagraphInterface {
  """The time that the Paragraph was created."""
  created: DateTime!
  """The entity ID."""
  id: ID!
  """Image"""
  image: MediaImage!
  """The paragraphs entity language code."""
  langcode: Language!
  """Published"""
  status: Boolean!
  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
}

"""Entity type paragraph."""
interface ParagraphInterface {
  """The time that the Paragraph was created."""
  created: DateTime!
  """The entity ID."""
  id: ID!
  """The paragraphs entity language code."""
  langcode: Language!
  """Published"""
  status: Boolean!
  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
}

"""A paragraph used to display a hand-picked list of articles."""
type ParagraphLiftupsArticle implements ParagraphInterface {
  """Articles"""
  articles: [NodeArticle!]
  """The time that the Paragraph was created."""
  created: DateTime!
  """Heading"""
  heading: String
  """The entity ID."""
  id: ID!
  """The paragraphs entity language code."""
  langcode: Language!
  """Published"""
  status: Boolean!
  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
}

"""a paragraph type containing a list of links."""
type ParagraphLink implements ParagraphInterface {
  """The time that the Paragraph was created."""
  created: DateTime!
  """The entity ID."""
  id: ID!
  """The paragraphs entity language code."""
  langcode: Language!
  """Add a list of links."""
  links: [Link!]!
  """Published"""
  status: Boolean!
  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
}

"""Renders a listing of articles in the frontend."""
type ParagraphListingArticle implements ParagraphInterface {
  """The time that the Paragraph was created."""
  created: DateTime!
  """Heading"""
  heading: String!
  """The entity ID."""
  id: ID!
  """The paragraphs entity language code."""
  langcode: Language!
  """Choose how many items at most you want to display for the listing."""
  limit: Int!
  """Published"""
  status: Boolean!
  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
}

"""Entity type paragraph."""
union ParagraphUnion = ParagraphAccordion | ParagraphAccordionItem | ParagraphFileAttachment | ParagraphFormattedText | ParagraphHero | ParagraphImage | ParagraphLiftupsArticle | ParagraphLink | ParagraphListingArticle | ParagraphVideo

"""Paragraph containing a video"""
type ParagraphVideo implements ParagraphInterface {
  """The time that the Paragraph was created."""
  created: DateTime!
  """The entity ID."""
  id: ID!
  """The paragraphs entity language code."""
  langcode: Language!
  """Published"""
  status: Boolean!
  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
  """Video"""
  video: ParagraphVideoVideoUnion!
}

"""Video"""
union ParagraphVideoVideoUnion = MediaRemoteVideo | MediaVideo

"""A field whose value conforms to the standard E.164"""
scalar PhoneNumber

"""The schema's entry-point for queries."""
type Query {
  """Query for view articles display graphql_1."""
  articlesView(
    """Filter the view."""
    filter: ArticlesViewFilterInput
    """Offset. The number of items skipped from beginning of this view."""
    offset: Int = 0
    """The page number to display."""
    page: Int = 0
    """Items per page. Allowed values are: 3, 5, 10, 25, 50."""
    pageSize: Int = 10
    """Sort the view direction."""
    sortDir: SortDirection
  ): ArticlesViewResult
  """Schema information."""
  info: SchemaInformation!
  """Load a Media entity by id."""
  media(
    """The id of the Media to load."""
    id: ID!
    """Optionally set the response language. Eg en, ja, fr."""
    langcode: String
    """
    Optionally set the revision of the entity. Eg current, latest, or an ID.
    """
    revision: ID
  ): MediaUnion
  """List of all MediaAudio on the platform."""
  mediaAudioItems(
    """Returns the elements that come after the specified cursor."""
    after: Cursor
    """Returns the elements that come before the specified cursor."""
    before: Cursor
    """Returns up to the first n elements from the list."""
    first: Int
    """Filter the results by language. Eg en, ja, fr."""
    langcode: String
    """Returns up to the last n elements from the list."""
    last: Int
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): MediaAudioConnection!
  """List of all MediaDocument on the platform."""
  mediaDocuments(
    """Returns the elements that come after the specified cursor."""
    after: Cursor
    """Returns the elements that come before the specified cursor."""
    before: Cursor
    """Returns up to the first n elements from the list."""
    first: Int
    """Filter the results by language. Eg en, ja, fr."""
    langcode: String
    """Returns up to the last n elements from the list."""
    last: Int
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): MediaDocumentConnection!
  """List of all MediaImage on the platform."""
  mediaImages(
    """Returns the elements that come after the specified cursor."""
    after: Cursor
    """Returns the elements that come before the specified cursor."""
    before: Cursor
    """Returns up to the first n elements from the list."""
    first: Int
    """Filter the results by language. Eg en, ja, fr."""
    langcode: String
    """Returns up to the last n elements from the list."""
    last: Int
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): MediaImageConnection!
  """List of all MediaRemoteVideo on the platform."""
  mediaRemoteVideos(
    """Returns the elements that come after the specified cursor."""
    after: Cursor
    """Returns the elements that come before the specified cursor."""
    before: Cursor
    """Returns up to the first n elements from the list."""
    first: Int
    """Filter the results by language. Eg en, ja, fr."""
    langcode: String
    """Returns up to the last n elements from the list."""
    last: Int
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): MediaRemoteVideoConnection!
  """List of all MediaVideo on the platform."""
  mediaVideos(
    """Returns the elements that come after the specified cursor."""
    after: Cursor
    """Returns the elements that come before the specified cursor."""
    before: Cursor
    """Returns up to the first n elements from the list."""
    first: Int
    """Filter the results by language. Eg en, ja, fr."""
    langcode: String
    """Returns up to the last n elements from the list."""
    last: Int
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): MediaVideoConnection!
  """Load a Menu by name."""
  menu(
    """
    Optionally set the response language. Eg en, ja, fr. Setting this langcode
    will change the current language of the entire response.
    """
    langcode: String
    """Internal menu name. Eg MAIN"""
    name: MenuAvailable!
  ): Menu
  """Load a Node entity by id."""
  node(
    """The id of the Node to load."""
    id: ID!
    """Optionally set the response language. Eg en, ja, fr."""
    langcode: String
    """
    Optionally set the revision of the entity. Eg current, latest, or an ID.
    """
    revision: ID
  ): NodeUnion
  """List of all NodeArticle on the platform."""
  nodeArticles(
    """Returns the elements that come after the specified cursor."""
    after: Cursor
    """Returns the elements that come before the specified cursor."""
    before: Cursor
    """Returns up to the first n elements from the list."""
    first: Int
    """Filter the results by language. Eg en, ja, fr."""
    langcode: String
    """Returns up to the last n elements from the list."""
    last: Int
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): NodeArticleConnection!
  """List of all NodePage on the platform."""
  nodePages(
    """Returns the elements that come after the specified cursor."""
    after: Cursor
    """Returns the elements that come before the specified cursor."""
    before: Cursor
    """Returns up to the first n elements from the list."""
    first: Int
    """Filter the results by language. Eg en, ja, fr."""
    langcode: String
    """Returns up to the last n elements from the list."""
    last: Int
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): NodePageConnection!
  """Load a Route by path."""
  route(
    """
    Optionally set the response language. Eg en, ja, fr. Setting this langcode
    will change the current language of the entire response.
    """
    langcode: String
    """Internal path to load. Eg /about"""
    path: String!
  ): RouteUnion
  """Is used to get all nodes to populate the sitemap"""
  sitemapNodes(
    """Filter the view."""
    filter: SitemapNodesFilterInput
    """Offset. The number of items skipped from beginning of this view."""
    offset: Int = 0
    """The page number to display."""
    page: Int = 0
    """Sort the view direction."""
    sortDir: SortDirection
  ): SitemapNodesResult
  """
  Get information about the currently authenticated user. NULL if not logged in.
  """
  viewer: User
}

"""Routes represent incoming requests that resolve to content."""
interface Route {
  """Whether this route is internal or external."""
  internal: Boolean!
  """URL of this route."""
  url: String!
}

"""A list of possible entities that can be returned by URL."""
union RouteEntityUnion = NodeArticle | NodeFrontpage | NodePage

"""Route outside of this website."""
type RouteExternal implements Route {
  """Whether this route is internal or external."""
  internal: Boolean!
  """URL of this route."""
  url: String!
}

"""Route within this website."""
type RouteInternal implements Route {
  """Breadcrumb links for this route."""
  breadcrumbs: [Link!]
  """Content assigned to this route."""
  entity: RouteEntityUnion
  """Whether this route is internal or external."""
  internal: Boolean!
  """URL of this route."""
  url: String!
}

"""Redirect to another URL with status."""
type RouteRedirect implements Route {
  """Whether this route is internal or external."""
  internal: Boolean!
  """Utility prop. Always true for redirects."""
  redirect: Boolean!
  """Suggested status for redirect. Eg 301."""
  status: Int!
  """URL of this route."""
  url: String!
}

"""Route types that can exist in the system."""
union RouteUnion = RouteExternal | RouteInternal | RouteRedirect

"""Schema information provided by the system."""
type SchemaInformation {
  """The schema description."""
  description: String
  """The internal path to the front page."""
  home: String
  """List of languages available."""
  languages: [Language!]!
  """The schema version."""
  version: String
}

input SitemapNodesFilterInput {
  """Translation language """
  langcode: String
}

"""Is used to get all nodes to populate the sitemap"""
type SitemapNodesResult implements View {
  """The description of the view."""
  description: String
  """The machine name of the display."""
  display: String!
  """Exposed filters for the view."""
  filters: [ViewFilter]!
  """The ID of the view."""
  id: ID!
  """The human friendly label of the view."""
  label: String
  """The language code of the view."""
  langcode: String
  """Information about the page in the view."""
  pageInfo: ViewPageInfo!
  """The results of the view."""
  results: [NodeUnion!]!
  """The machine name of the view."""
  view: String!
}

"""Sort direction."""
enum SortDirection {
  """Ascending"""
  ASC
  """Descending"""
  DESC
}

"""The schema's entry-point for subscriptions."""
type Subscription {
  """Placeholder for subscription extension."""
  _: Boolean!
}

"""A processed text format defined by the CMS."""
type Text {
  """The text format used to process the text value."""
  format: String
  """The processed text value."""
  processed: Html
  """The raw text value."""
  value: String
}

"""A processed text format with summary defined by the CMS."""
type TextSummary {
  """The text format used to process the text value."""
  format: String
  """The processed text value."""
  processed: Html
  """The processed text summary."""
  summary: Html
  """The raw text value."""
  value: String
}

"""RFC 3339 compliant time string."""
scalar Time

"""A field whose value exists in the standard IANA Time Zone Database."""
scalar TimeZone

"""
Type represents date and time as number of milliseconds from start of the UNIX epoch.
"""
scalar Timestamp

"""Available translations for content."""
type Translation {
  """The language of the translation."""
  langcode: Language!
  """The path to the translated content."""
  path: String
  """The title of the translation."""
  title: String
}

"""
Unsupported entity or field type in the schema.
This entity may not have been enabled in the schema yet and is being referenced via entity reference.
"""
type UnsupportedType {
  """Unsupported type, always TRUE."""
  unsupported: Boolean
}

"""Untyped structured data. Eg JSON, configuration, settings, attributes."""
scalar UntypedStructuredData

"""Entity type user."""
type User implements MetaTagInterface & UserInterface {
  """The time that the user was last edited."""
  changed: DateTime!
  """The time that the user was created."""
  created: DateTime!
  """The entity ID."""
  id: ID!
  """The email of this user."""
  mail: Email
  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!
  """The name of this user."""
  name: String!
  """URL alias"""
  path: String!
  """The roles the user has."""
  roles: [UserRoles!]
  """Whether the user is active or blocked."""
  status: UserStatus!
  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
}

"""Entity type user."""
interface UserInterface {
  """The time that the user was last edited."""
  changed: DateTime!
  """The time that the user was created."""
  created: DateTime!
  """The entity ID."""
  id: ID!
  """The email of this user."""
  mail: Email
  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!
  """The name of this user."""
  name: String!
  """URL alias"""
  path: String!
  """The roles the user has."""
  roles: [UserRoles!]
  """Whether the user is active or blocked."""
  status: UserStatus!
  """The Universally Unique IDentifier (UUID)."""
  uuid: ID!
}

"""User roles."""
scalar UserRoles

"""Whether the user is active or blocked."""
enum UserStatus {
  """An active user is able to login on the platform and view content"""
  ACTIVE
  """
  A blocked user is unable to access the platform, although their content will still be visible until it's deleted.
  """
  BLOCKED
}

"""Entity type user."""
union UserUnion = User

"""A string that will have a value of format Â±hh:mm"""
scalar UtcOffset

"""Views represent collections of curated data from the CMS."""
interface View {
  """The description of the view."""
  description: String
  """The machine name of the display."""
  display: String!
  """The ID of the view."""
  id: ID!
  """The human friendly label of the view."""
  label: String
  """The language code of the view."""
  langcode: String
  """Information about the page in the view."""
  pageInfo: ViewPageInfo!
  """The machine name of the view."""
  view: String!
}

"""An exposed filter option for the view."""
type ViewFilter {
  """The filter element attributes."""
  attributes: UntypedStructuredData!
  """The filter element description."""
  description: String
  """The filter identifier."""
  id: ID!
  """The filter element label."""
  label: String
  """Whether the filter allows multiple values."""
  multiple: Boolean!
  """The filter element options if any are defined."""
  options: UntypedStructuredData
  """The filter plugin type."""
  plugin: String!
  """Whether the filter is required."""
  required: Boolean!
  """The filter field type."""
  type: String!
  """The value for the filter. Could be an array for multiple values."""
  value: UntypedStructuredData
}

"""Information about the page in a view."""
type ViewPageInfo {
  """Any result offset being used."""
  offset: Int!
  """The current page being returned."""
  page: Int!
  """How many results per page."""
  pageSize: Int!
  """How many results total."""
  total: Int!
}

"""A reference to an embedded view"""
type ViewReference {
  """The contextual filter values used."""
  contextualFilter: [String!]
  """The machine name of the display."""
  display: String!
  """How many results per page."""
  pageSize: Int
  """
  The name of the query used to fetch the data, if the view is a GraphQL display.
  """
  query: String
  """The machine name of the view."""
  view: String!
}

"""All available view result types."""
union ViewResultUnion = ArticlesViewResult | SitemapNodesResult